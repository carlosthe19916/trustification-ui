import React from "react";
import { Link } from "react-router-dom";

import {
  Breadcrumb,
  BreadcrumbItem,
  Button,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  PageSection,
  Split,
  SplitItem,
  Stack,
  StackItem,
  Tab,
  TabTitleText,
  Tabs,
  Text,
  TextContent,
  Truncate,
} from "@patternfly/react-core";
import DownloadIcon from "@patternfly/react-icons/dist/esm/icons/download-icon";

import dayjs from "dayjs";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import { PathParam, useRouteParams } from "@app/Routes";
import { SeverityRenderer } from "@app/components/csaf/severity-renderer";
import { useDownload } from "@app/hooks/csaf/download-advisory";
import { useFetchCveById } from "@app/queries/cves";

export const CveDetails: React.FC = () => {
  const cveId = useRouteParams(PathParam.CVE_ID);

  const { cve, isFetching, fetchError } = useFetchCveById(cveId);

  const { downloadCve } = useDownload();

  return (
    <>
      <PageSection variant="light" type="breadcrumb">
        <Breadcrumb>
          <BreadcrumbItem key="cves">
            <Link to="/cves">CVEs</Link>
          </BreadcrumbItem>
          <BreadcrumbItem to="#" isActive>
            CVE details
          </BreadcrumbItem>
        </Breadcrumb>
      </PageSection>
      <PageSection variant="light">
        <Split hasGutter>
          <SplitItem isFilled>
            <Stack hasGutter>
              <StackItem>
                <Split hasGutter>
                  <SplitItem>
                    <TextContent>
                      <Text component="h1">{cveId}</Text>
                    </TextContent>
                  </SplitItem>
                  <SplitItem>
                    {cve?.containers.cna.metrics?.map((e) => (
                      <SeverityRenderer
                        variant="label"
                        score={e.cvssV3_1.baseScore}
                      />
                    ))}
                  </SplitItem>
                </Split>
              </StackItem>
              {cve?.containers.cna.title && (
                <StackItem>{cve?.containers.cna.title}</StackItem>
              )}
              {cve?.containers.cna.descriptions && (
                <StackItem>
                  <Truncate
                    content={
                      cve?.containers.cna.descriptions
                        .map((e) => e.value)
                        .join("\n") || ""
                    }
                  />
                </StackItem>
              )}
              <StackItem>
                <DescriptionList columnModifier={{ lg: "3Col" }}>
                  <DescriptionListGroup>
                    <DescriptionListTerm>Reserved</DescriptionListTerm>
                    <DescriptionListDescription>
                      {cve
                        ? dayjs(cve.cveMetadata.dateReserved).format(
                            RENDER_DATE_FORMAT
                          )
                        : ""}
                    </DescriptionListDescription>
                  </DescriptionListGroup>
                  <DescriptionListGroup>
                    <DescriptionListTerm>Published date</DescriptionListTerm>
                    <DescriptionListDescription>
                      {cve
                        ? dayjs(cve.cveMetadata.datePublished).format(
                            RENDER_DATE_FORMAT
                          )
                        : ""}
                    </DescriptionListDescription>
                  </DescriptionListGroup>
                  <DescriptionListGroup>
                    <DescriptionListTerm>Last modified</DescriptionListTerm>
                    <DescriptionListDescription>
                      {cve
                        ? dayjs(cve.cveMetadata.dateUpdated).format(
                            RENDER_DATE_FORMAT
                          )
                        : ""}
                    </DescriptionListDescription>
                  </DescriptionListGroup>
                </DescriptionList>
              </StackItem>
              <StackItem>
                <Tabs defaultActiveKey={0} aria-label="CVE tabs" role="region">
                  <Tab
                    eventKey={0}
                    title={<TabTitleText>Related products</TabTitleText>}
                  >
                    Users
                  </Tab>
                  <Tab
                    eventKey={1}
                    title={<TabTitleText>Related advisories</TabTitleText>}
                  >
                    Containers
                  </Tab>
                </Tabs>
              </StackItem>
            </Stack>
          </SplitItem>
          <SplitItem>
            <Button
              variant="secondary"
              onClick={() => {
                if (cveId) {
                  downloadCve(cveId);
                }
              }}
            >
              <DownloadIcon /> Download
            </Button>
          </SplitItem>
        </Split>
      </PageSection>
    </>
  );
};
