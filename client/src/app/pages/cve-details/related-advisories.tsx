import React from "react";
import { NavLink } from "react-router-dom";

import dayjs from "dayjs";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { RHSeverityShield } from "@app/components/csaf/rh-severity";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { useFetchAdvisoryByCveId } from "@app/queries/advisories";
import {
  ExpandableRowContent,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

interface RelatedAdvisoriesProps {
  cveId: string;
}

export const RelatedAdvisories: React.FC<RelatedAdvisoriesProps> = ({
  cveId,
}) => {
  const { advisories, isFetching, fetchError } = useFetchAdvisoryByCveId(cveId);

  const tableControls = useLocalTableControls({
    tableName: "related-advisories-table",
    persistTo: "sessionStorage",
    idProperty: "id",
    items: advisories || [],
    isLoading: isFetching,
    columnNames: {
      id: "ID",
      title: "Title",
      agregatedSeverity: "Aggregated severity",
      revision: "Revision",
      vulnerabilities: "Vulnerabilities",
    },
    hasActionsColumn: true,
    isFilterEnabled: true,
    filterCategories: [],
    isSortEnabled: true,
    sortableColumns: [],
    isPaginationEnabled: true,
    isExpansionEnabled: true,
    expandableVariant: "single",
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      <Table
        {...tableProps}
        aria-label="Related advisories table"
        className="vertical-aligned-table"
      >
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "id" })} />
              <Th {...getThProps({ columnKey: "title" })} />
              <Th {...getThProps({ columnKey: "agregatedSeverity" })} />
              <Th {...getThProps({ columnKey: "revision" })} />
              <Th {...getThProps({ columnKey: "vulnerabilities" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={!!fetchError}
          isNoData={advisories?.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.id}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td width={15} {...getTdProps({ columnKey: "id" })}>
                      <NavLink to={`/advisories/${item.id}`}>{item.id}</NavLink>
                    </Td>
                    <Td
                      width={40}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "title" })}
                    >
                      {item.title}
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "agregatedSeverity" })}
                    >
                      <RHSeverityShield value={item.severity} />
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "revision" })}
                    >
                      {dayjs(item.date as any).format(RENDER_DATE_FORMAT)}
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "vulnerabilities" })}
                    >
                      {item.cves.length}
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
                {isCellExpanded(item) ? (
                  <Tr isExpanded>
                    <Td colSpan={7}>
                      <ExpandableRowContent>Expanded area</ExpandableRowContent>
                    </Td>
                  </Tr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="related-advisories-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};
