import React, { useMemo } from "react";
import { NavLink } from "react-router-dom";

import { AxiosError } from "axios";
import dayjs from "dayjs";
import { PackageURL } from "packageurl-js";

import { Label, Skeleton } from "@patternfly/react-core";
import {
  ExpandableRowContent,
  IExtraData,
  IRowData,
  Td as PFTd,
  Tr as PFTr,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import { ProductCveStatus, SbomIndexed } from "@app/api/models";
import { useFetchCveRelatedProducts } from "@app/queries/cves";
import { useFetchSbomIndexedByUId } from "@app/queries/sboms";
import { useLocalTableControls } from "@app/hooks/table-controls";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { SimplePagination } from "@app/components/SimplePagination";

interface TableData {
  sbomUid: string;
  status: ProductCveStatus;
  packages: {
    purl: string;
    type: string;
  }[];
}

interface RelatedProductsProps {
  cveId: string;
}

export const RelatedProducts: React.FC<RelatedProductsProps> = ({ cveId }) => {
  const { relatedProducts, isFetching, fetchError } =
    useFetchCveRelatedProducts(cveId);

  const tableData = useMemo(() => {
    return Object.entries(relatedProducts?.products || {}).flatMap(([k, v]) => {
      return Object.entries(v).map(([sbomUid, packages]) => {
        const result: TableData = {
          status: k as ProductCveStatus,
          sbomUid,
          packages,
        };
        return result;
      });
    });
  }, [relatedProducts]);

  const tableControls = useLocalTableControls({
    tableName: "related-products-table",
    persistTo: "sessionStorage",
    idProperty: "sbomUid",
    items: tableData,
    isLoading: isFetching,
    columnNames: {
      name: "Name",
      version: "Version",
      status: "Status",
      dependencies: "Dependencies",
      supplier: "Supplier",
      createdOn: "Created on",
    },
    hasActionsColumn: true,
    isFilterEnabled: true,
    filterCategories: [],
    isSortEnabled: true,
    sortableColumns: [],
    isPaginationEnabled: true,
    isExpansionEnabled: true,
    expandableVariant: "compound",
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
    expansionDerivedState: { isCellExpanded, setCellExpanded },
  } = tableControls;

  return (
    <>
      <Table
        {...tableProps}
        aria-label="Related products table"
        className="vertical-aligned-table"
      >
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "version" })} />
              <Th {...getThProps({ columnKey: "status" })} />
              <Th {...getThProps({ columnKey: "dependencies" })} />
              <Th {...getThProps({ columnKey: "supplier" })} />
              <Th {...getThProps({ columnKey: "createdOn" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={!!fetchError}
          isNoData={tableData.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.sbomUid} isExpanded={isCellExpanded(item)}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <TdWrapper sbom_uid={item.sbomUid}>
                      {(sbom, isFetching, fetchError) => (
                        <>
                          {isFetching ? (
                            <PFTd width={100} colSpan={4}>
                              <Skeleton />
                            </PFTd>
                          ) : (
                            <>
                              <Td
                                width={20}
                                {...getTdProps({ columnKey: "name" })}
                              >
                                <NavLink to={`/sboms/${sbom?.id}`}>
                                  {sbom?.name}
                                </NavLink>
                              </Td>
                              <Td
                                width={15}
                                modifier="truncate"
                                {...getTdProps({ columnKey: "version" })}
                              >
                                {sbom?.version}
                              </Td>
                              <Td {...getTdProps({ columnKey: "status" })}>
                                <Label>{item.status}</Label>
                              </Td>
                              <Td
                                width={15}
                                modifier="truncate"
                                {...getTdProps({ columnKey: "dependencies" })}
                                compoundExpand={{
                                  isExpanded: isCellExpanded(
                                    item,
                                    "dependencies"
                                  ),
                                  onToggle: (
                                    event: React.MouseEvent,
                                    rowIndex: number,
                                    colIndex: number,
                                    isOpen: boolean,
                                    rowData: IRowData,
                                    extraData: IExtraData
                                  ) => {
                                    setCellExpanded({
                                      item,
                                      isExpanding: !isOpen,
                                      columnKey: "dependencies",
                                    });
                                  },
                                }}
                              >
                                {item.packages.length}
                              </Td>
                              <Td
                                width={15}
                                modifier="truncate"
                                {...getTdProps({ columnKey: "supplier" })}
                              >
                                {sbom?.supplier}
                              </Td>
                              <Td
                                width={15}
                                modifier="truncate"
                                {...getTdProps({ columnKey: "createdOn" })}
                              >
                                {sbom
                                  ? dayjs(sbom.created as any).format(
                                      RENDER_DATE_FORMAT
                                    )
                                  : ""}
                              </Td>
                            </>
                          )}
                        </>
                      )}
                    </TdWrapper>
                  </TableRowContentWithControls>
                </Tr>
                {isCellExpanded(item) ? (
                  <PFTr isExpanded>
                    <PFTd colSpan={7}>
                      <ExpandableRowContent>
                        {isCellExpanded(item, "dependencies") && (
                          <DependenciesTable packages={item.packages} />
                        )}
                      </ExpandableRowContent>
                    </PFTd>
                  </PFTr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="related-products-pagination-bottom"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};

const TdWrapper = ({
  sbom_uid,
  children,
}: {
  sbom_uid: string;
  children: (
    sbom: SbomIndexed | undefined,
    isFetching: boolean,
    fetchError: AxiosError
  ) => React.ReactNode;
}) => {
  const { sbom, isFetching, fetchError } = useFetchSbomIndexedByUId(sbom_uid);
  return children(sbom, isFetching, fetchError);
};

const DependenciesTable = ({
  packages,
}: {
  packages: { purl: string; type: string }[];
}) => {
  const tableData = useMemo(() => {
    return packages.map((e) => {
      let pkg;
      try {
        pkg = PackageURL.fromString(e.purl);
      } catch (e) {
        console.log(e);
      }

      return {
        ...e,
        pkg,
      };
    });
  }, [packages]);
  return (
    <Table aria-label="Dependencies table" variant="compact">
      <Thead>
        <PFTr>
          <Th width={10}>Type</Th>
          <Th width={15}>Namespace</Th>
          <Th width={15}>Name</Th>
          <Th width={15}>Version</Th>
          <Th width={15}>Path</Th>
          <Th width={20}>Qualifiers</Th>
          <Th width={10}>Dependency tree position</Th>
        </PFTr>
      </Thead>
      <Tbody>
        {tableData.map((item, index) => (
          <PFTr key={index}>
            <PFTd>{item.pkg?.type}</PFTd>
            <PFTd>{item.pkg?.namespace}</PFTd>
            <PFTd>{item.pkg?.name}</PFTd>
            <PFTd>{item.pkg?.version}</PFTd>
            <PFTd>{item.pkg?.subpath}</PFTd>
            <PFTd>
              {Object.entries(item.pkg?.qualifiers || {}).map(
                ([k, v], index) => (
                  <Label key={index} isCompact>{`${k}=${v}`}</Label>
                )
              )}
            </PFTd>
            <PFTd>{item.type}</PFTd>
          </PFTr>
        ))}
      </Tbody>
    </Table>
  );
};
