import React from "react";
import { NavLink } from "react-router-dom";

import dayjs from "dayjs";

import {
  FILTER_DATE_FORMAT,
  RENDER_DATE_FORMAT,
  TablePersistenceKeyPrefixes,
} from "@app/Constants";
import { SeverityRenderer } from "@app/components/csaf/severity-renderer";
import {
  getHubRequestParams,
  useTableControlProps,
  useTableControlState,
} from "@app/hooks/table-controls";
import { useFetchCves } from "@app/queries/cves";
import { FilterType } from "@app/components/FilterToolbar";
import { useSelectionState } from "@app/hooks/useSelectionState";
import {
  ExpandableRowContent,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";

export const useCveList = () => {
  const tableControlState = useTableControlState({
    tableName: "cves",
    persistTo: "state",
    persistenceKeyPrefix: TablePersistenceKeyPrefixes.cves,
    columnNames: {
      id: "ID",
      description: "Description",
      cvss: "CVSS",
      datePublished: "Date published",
      relatedDocuments: "Related documents",
    },
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "filterText",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
      },
      {
        categoryKey: "state:is",
        title: "State",
        placeholderText: "State",
        type: FilterType.select,
        selectOptions: [
          { value: "published", label: "Published" },
          { value: "rejected", label: "Rejected" },
        ],
      },
      {
        categoryKey: "severity",
        title: "CVSS",
        placeholderText: "CVSS",
        type: FilterType.multiselect,
        selectOptions: [
          { value: "low", label: "Low" },
          { value: "moderate", label: "Moderate" },
          { value: "important", label: "Important" },
          { value: "critical", label: "Critical" },
        ],
      },
      {
        categoryKey: "datePublished",
        title: "Published",
        placeholderText: "Published",
        type: FilterType.select,
        selectOptions: [
          {
            value: `${dayjs().subtract(7, "day").format(FILTER_DATE_FORMAT)}..${dayjs().format(FILTER_DATE_FORMAT)}`,
            label: "Last 7 days",
          },
          {
            value: `${dayjs().subtract(30, "day").format(FILTER_DATE_FORMAT)}..${dayjs().format(FILTER_DATE_FORMAT)}`,
            label: "Last 30 days",
          },
          {
            value: `${dayjs().startOf("year").format(FILTER_DATE_FORMAT)}..${dayjs().format(FILTER_DATE_FORMAT)}`,
            label: "This year",
          },
          ...[...Array(3)].map((_, index) => {
            const date = dayjs()
              .startOf("year")
              .subtract(index + 1, "year");
            return {
              value: `${date.format(FILTER_DATE_FORMAT)}..${date.endOf("year").format(FILTER_DATE_FORMAT)}`,
              label: date.year().toString(),
            };
          }),
        ],
      },
    ],
    isSortEnabled: true,
    sortableColumns: ["cvss", "datePublished"],
    isPaginationEnabled: true,
  });

  const {
    result: { data: cves, total: totalItemCount },
    isFetching,
    fetchError,
  } = useFetchCves(
    getHubRequestParams({
      ...tableControlState,
      hubSortFieldKeys: {
        cvss: "score",
        datePublished: "datePublished",
      },
    })
  );

  const tableControls = useTableControlProps({
    ...tableControlState,
    idProperty: "_ui_unique_id",
    currentPageItems: cves,
    totalItemCount,
    isLoading: isFetching,
    selectionState: useSelectionState({
      items: cves,
      isEqual: (a, b) => a._ui_unique_id === b._ui_unique_id,
    }),
  });

  const {
    numRenderedColumns,
    currentPageItems,
    propHelpers: { tableProps, getThProps, getTrProps, getTdProps },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  const table = (
    <>
      <Table {...tableProps} aria-label="CVE table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "id" })} />
              <Th {...getThProps({ columnKey: "description" })} />
              <Th {...getThProps({ columnKey: "cvss" })} />
              <Th {...getThProps({ columnKey: "datePublished" })} />
              <Th {...getThProps({ columnKey: "relatedDocuments" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={isFetching}
          isError={!!fetchError}
          isNoData={totalItemCount === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.document.document.id}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td width={15} {...getTdProps({ columnKey: "id" })}>
                      <NavLink to={`/cves/${item.document.document.id}`}>
                        {item.document.document.id}
                      </NavLink>
                    </Td>
                    <Td
                      width={50}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "description" })}
                    >
                      {item.document.document.title ||
                        item.document.document.descriptions}
                    </Td>
                    <Td width={15} {...getTdProps({ columnKey: "cvss" })}>
                      {item.document.document.cvss3x_score !== null &&
                        item.document.document.cvss3x_score !== undefined && (
                          <SeverityRenderer
                            variant="progress"
                            score={item.document.document.cvss3x_score}
                          />
                        )}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "datePublished" })}
                    >
                      {dayjs(item.document.document.date_published).format(
                        RENDER_DATE_FORMAT
                      )}
                    </Td>
                    <Td
                      width={10}
                      {...getTdProps({ columnKey: "relatedDocuments" })}
                    >
                      {item.document.related_products}
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
                {isCellExpanded(item) ? (
                  <Tr isExpanded>
                    <Td colSpan={7}>
                      <ExpandableRowContent>Expanded area</ExpandableRowContent>
                    </Td>
                  </Tr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
    </>
  );

  return {
    data: {
      isFetching,
      fetchError,
      cves,
      totalItemCount,
    },
    tableControls,
    components: { table },
  };
};
